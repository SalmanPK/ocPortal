<?php /*

 ocPortal
 Copyright (c) ocProducts, 2004-2012

 See text/EN/licence.txt for full licencing information.


 NOTE TO PROGRAMMERS:
   Do not edit this file. If you need to make changes, save your changed file to the appropriate *_custom folder
   **** If you ignore this advice, then your website upgrades (e.g. for bug fixes) will likely kill your changes ****

*/

/**
 * @license        http://opensource.org/licenses/cpal_1.0 Common Public Attribution License
 * @copyright    ocProducts Ltd
 * @package        ecommerce
 */
class Hook_ccbill
{
	var $_length_unit_to_days = array(
		'd' => 1,
		'w' => 7,
		'm' => 30,
		'y' => 365
	);

	var $_currency_numeric_to_alphabetic_code = array(
		// Currencies supported by CCBill
		840 => 'USD',
		978 => 'EUR',
		826 => 'GBP',
		124 => 'CAD',
		 36 => 'AUD',
		392 => 'JPY',
	);

	var $_currency_alphabetic_to_numeric_code = array(
		// Currencies supported by CCBill
		'USD' => 840,
		'EUR' => 978,
		'GBP' => 826,
		'CAD' => 124,
		'AUD' => 36,
		'JPY' => 392,
	);

	/**
	 * Get the CCBill account ID
	 *
	 * @return string			The answer.
	 */
	function _get_account_id()
	{
		return ecommerce_test_mode()?get_option('ipn_test'):get_option('ipn');
	}

	/**
	 * Get the PayPal IPN URL.
	 *
	 * @return URLPATH        The IPN url.
	 */
	function get_ipn_url()
	{
		return 'https://bill.ccbill.com/jpost/signup.cgi';
	}

	/**
	 * Generate a transaction ID.
	 *
	 * @return string	A transaction ID.
	 */
	function generate_trans_id()
	{
		return md5(uniqid(strval(mt_rand(0,1000)),true));
	}

	/**
	 * Make a transaction (payment) button.
	 *
	 * @param  ID_TEXT        The product codename.
	 * @param  SHORT_TEXT    The human-readable product title.
	 * @param  ID_TEXT        The purchase ID.
	 * @param  float            A transaction amount.
	 * @param  ID_TEXT        The currency to use.
	 * @return tempcode        The button
	 */
	function make_transaction_button($product, $item_name, $purchase_id, $amount, $currency)
	{
		$amount = float_to_raw_string($amount);
		$currency = strval($this->_currency_alphabetic_to_numeric_code[$currency]); // @TODO: Display error if currency not supported
		$payment_address = strval($this->_get_account_id());
		$ipn_url = $this->get_ipn_url();
		$trans_id = $this->generate_trans_id();

		$user_details = array();
		if (!is_guest()) {
			$user_details['customer_fname'] = get_ocp_cpf('firstname');
			$user_details['customer_lname'] = get_ocp_cpf('lastname');
			$user_details['address1'] = get_ocp_cpf('building_name_or_number');
			$user_details['email'] = $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member());
			$user_details['city'] = get_ocp_cpf('city');
			$user_details['state'] = get_ocp_cpf('state');
			$user_details['zipcode'] = get_ocp_cpf('post_code');
			$user_details['country'] = get_ocp_cpf('country');
			$user_details['username'] =  $GLOBALS['FORUM_DRIVER']->get_username(get_member());
		}

		$account_num = $this->_get_account_id();
		$subaccount_nums = explode(',', get_option('vpn_username'));
		$subaccount_num = sprintf('%04d', $subaccount_nums[0]); // First value is for simple transactions, has to be exactly 4 digits
		$form_name = explode(',', get_option('ccbill_form_names'));
		$form_name = $form_name[0]; // First value is for simple transactions
		// CCBill oddly requires us to pass this parameter for single transactions,
		// this will show up as a confusing "$X.XX for 99 days" message to customers on the CCBill form.
		// To fix this - you need to set up a "custom dynamic description" which removes that message, by contacting CCBill support.
		$form_period = '99';
		$digest = md5($amount.$form_period.$currency.get_option('ipn_digest'));

		$GLOBALS['SITE_DB']->query_insert('trans_expecting',array(
			'id'=>$trans_id,
			'e_purchase_id'=>$purchase_id,
			'e_item_name'=>$item_name,
			'e_member_id'=>get_member(),
			'e_amount'=>float_to_raw_string($amount),
			'e_ip_address'=>get_ip_address(),
			'e_session_id'=>get_session_id(),
			'e_time'=>time(),
			'e_length'=>NULL,
			'e_length_units'=>'',
		));

		return do_template('ECOM_BUTTON_VIA_CCBILL', array(
			'_GUID' => 'b32410f374ab4fdb914a2647a63549b3', 'PRODUCT' => strval($product), 'ITEM_NAME' => strval($item_name),
			'PURCHASE_ID' => strval($purchase_id), 'AMOUNT' => $amount, 'CURRENCY' => $currency,
			'PAYMENT_ADDRESS' => $payment_address, 'IPN_URL' => $ipn_url, 'TRANS_ID' => $trans_id,
			'MEMBER_ADDRESS' => $user_details, 'ACCOUNT_NUM' => $account_num, 'SUBACCOUNT_NUM' => $subaccount_num,
			'FORM_NAME' => $form_name, 'FORM_PERIOD' => $form_period, 'DIGEST' => $digest,
		));
	}

	/**
	 * Make a subscription (payment) button.
	 *
	 * @param  ID_TEXT        The product codename.
	 * @param  SHORT_TEXT    The human-readable product title.
	 * @param  ID_TEXT        The purchase ID.
	 * @param  float            A transaction amount.
	 * @param  integer        The subscription length in the units.
	 * @param  ID_TEXT        The length units.
	 * @set    d w m y
	 * @param  ID_TEXT        The currency to use.
	 * @return tempcode        The button
	 */
	function make_subscription_button($product, $item_name, $purchase_id, $amount, $length, $length_units, $currency)
	{
		$amount = float_to_raw_string($amount);
		$currency = strval($this->_currency_alphabetic_to_numeric_code[$currency]); // @TODO: Display error if currency not supported
		$payment_address = strval($this->_get_account_id());
		$ipn_url = $this->get_ipn_url();
		$trans_id = $this->generate_trans_id();

		$user_details = array();
		if (!is_guest()) {
			$user_details['customer_fname'] = get_ocp_cpf('firstname');
			$user_details['customer_lname'] = get_ocp_cpf('lastname');
			$user_details['address1'] = get_ocp_cpf('building_name_or_number');
			$user_details['email'] = $GLOBALS['FORUM_DRIVER']->get_member_email_address(get_member());
			$user_details['city'] = get_ocp_cpf('city');
			$user_details['state'] = get_ocp_cpf('state');
			$user_details['zipcode'] = get_ocp_cpf('post_code');
			$user_details['country'] = get_ocp_cpf('country');
			$user_details['username'] =  $GLOBALS['FORUM_DRIVER']->get_username(get_member());
		}

		$account_num = $this->_get_account_id();
		$subaccount_nums = explode(',', get_option('vpn_username'));
		$subaccount_num = sprintf('%04d', count($subaccount_nums) === 1 ? $subaccount_nums[0] : $subaccount_nums[1]); // Second value is for subscriptions, has to be exactly 4 digits
		$form_name = explode(',', get_option('ccbill_form_names'));
		$form_name = count($form_name) === 1 ? $form_name[0] : $form_name[1]; // Second value is for subscriptions
		$form_period = strval($length * $this->_length_unit_to_days[$length_units]);
		$digest = md5($amount.$form_period.$amount.$form_period.'99'.$currency.get_option('ipn_digest')); // formPrice.formPeriod.formRecurringPrice.formRecurringPeriod.formRebills.currencyCode.salt

		$GLOBALS['SITE_DB']->query_insert('trans_expecting',array(
			'id'=>$trans_id,
			'e_purchase_id'=>$purchase_id,
			'e_item_name'=>$item_name,
			'e_member_id'=>get_member(),
			'e_amount'=>float_to_raw_string($amount),
			'e_ip_address'=>get_ip_address(),
			'e_session_id'=>get_session_id(),
			'e_time'=>time(),
			'e_length'=>$length,
			'e_length_units'=>$length_units,
		));

		return do_template('ECOM_SUBSCRIPTION_BUTTON_VIA_CCBILL', array(
			'_GUID' => '5bb37b16c48d4892a7fd7c62f1ea4837', 'PRODUCT' => strval($product), 'ITEM_NAME' => strval($item_name),
			'LENGTH' => strval($length), 'LENGTH_UNITS' => $length_units, 'PURCHASE_ID' => strval($purchase_id),
			'AMOUNT' => $amount, 'CURRENCY' => $currency, 'PAYMENT_ADDRESS' => $payment_address, 'IPN_URL' => $ipn_url,
			'TRANS_ID' => $trans_id, 'MEMBER_ADDRESS' => $user_details, 'ACCOUNT_NUM' => $account_num, 'SUBACCOUNT_NUM' => $subaccount_num,
			'FORM_NAME' => $form_name, 'FORM_PERIOD' => $form_period, 'DIGEST' => $digest,
		));
	}

	/**
	 * Make a subscription cancellation button.
	 *
	 * @param  ID_TEXT        The purchase ID.
	 * @return tempcode        The button
	 */
	function make_cancel_button($purchase_id)
	{
		return do_template('ECOM_CANCEL_BUTTON_VIA_CCBILL', array('_GUID' => 'a4579d084db1429287b3c775620636b2', 'PURCHASE_ID' => $purchase_id));
	}

	/**
	 * Find whether the hook auto-cancels (if it does, auto cancel the given trans-id).
	 *
	 * @param  string        Transaction ID to cancel
	 * @return ?boolean    True: yes. False: no. (NULL: cancels via a user-URL-directioning)
	 */
	function auto_cancel($trans_id)
	{
		return false;
	}

	/**
	 * Find a transaction fee from a transaction amount. Regular fees aren't taken into account.
	 *
	 * @param  float    A transaction amount.
	 * @return float    The fee
	 */
	function get_transaction_fee($amount)
	{
		return 0.12*$amount; // A wild guess for now
	}

	/**
	 * Handle IPN's. The function may produce output, which would be returned to the Payment Gateway. The function may do transaction verification.
	 *
	 * @return array    A long tuple of collected data.
	 */
	function handle_transaction()
	{
		// assign posted variables to local variables
		$trans_id=post_param_integer('customTransId');
		$purchase_id = post_param_integer('customPurchaseId');

		$transaction_rows=$GLOBALS['SITE_DB']->query_select('trans_expecting',array('*'),array('id'=>$trans_id,'e_purchase_id'=>$purchase_id),'',1);
		if (!array_key_exists(0,$transaction_rows)) warn_exit(do_lang_tempcode('MISSING_RESOURCE'));
		$transaction_row=$transaction_rows[0];

		$subscription_id = post_param_integer('subscriptionId', 0);
		$denial_id = post_param_integer('denialId', 0);
		$response_digest = post_param('responseDigest');
		$success_response_digest = md5(strval($subscription_id).'1'.get_option('ipn_digest')); // responseDigest must have this value on success
		$denial_response_digest = md5(strval($denial_id).'0'.get_option('ipn_digest')); // responseDigest must have this value on failure

		if (($response_digest !== $success_response_digest) && ($response_digest !== $denial_response_digest)) {
			my_exit(do_lang('IPN_UNVERIFIED')); // Hacker?!!!
		}

		$success=($success_response_digest===$response_digest);
		$is_subscription = (bool)post_param_integer('customIsSubscription');
		$item_name = $is_subscription ? '' : $transaction_row['e_item_name'];
		$payment_status=$success ? 'Completed' : 'Failed';
		$reason_code=post_param_integer('reasonForDeclineCode', 0);
		$pending_reason='';
		$memo='';
		$mc_gross=post_param('initialPrice');
		$mc_currency=$this->_currency_numeric_to_alphabetic_code[post_param_integer('baseCurrency')];

		if (addon_installed('shopping')) {
			$this->store_shipping_address($purchase_id);
		}

		return array($purchase_id, $item_name, $payment_status, $reason_code, $pending_reason, $memo, $mc_gross, $mc_currency, $trans_id, '');
	}

	/**
	 * Store shipping address for orders
	 *
	 * @param  AUTO_LINK        Order id
	 * @return ?mixed            Address id (NULL: No address record found)
	 */
	function store_shipping_address($order_id)
	{
		if (is_null(post_param('address1', NULL))) return NULL;

		if (is_null($GLOBALS['SITE_DB']->query_value_null_ok('shopping_order_addresses', 'id', array('order_id' => $order_id)))) {
			$shipping_address = array();
			$shipping_address['order_id'] = $order_id;
			$shipping_address['address_name'] = post_param('customer_fname', '').' '.post_param('customer_lname', '');
			$shipping_address['address_street'] = post_param('address1', '');
			$shipping_address['address_zip'] = post_param('zipcode', '');
			$shipping_address['address_city'] = post_param('city', '');
			$shipping_address['address_country'] = post_param('country', '');
			$shipping_address['receiver_email'] = post_param('email', '');

			return $GLOBALS['SITE_DB']->query_insert('shopping_order_addresses', $shipping_address, true);
		}

		return NULL;
	}
}


